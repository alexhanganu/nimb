# -*- coding: utf-8 -*-
"""
This module contains the GLMImageRunner, an independent script for extracting
and saving statistical map images from a completed FreeSurfer GLM analysis.

It reads the results generated by the `fs_glm_runglm.py` script and uses
Freeview/tksurfer to create TIFF images of the significant clusters for
both FDR and Monte-Carlo corrected results. It is designed to be submitted as
a job to a scheduler.
"""

import os
import sys
import json
import logging
from pathlib import Path

# Adjust path to import other NIMB modules
try:
    top = Path(__file__).resolve().parents[2]
    sys.path.append(str(top))
except ImportError:
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from setup.config_manager import ConfigManager
from distribution.utilities import load_json
from .fs_utils import FS_Utils

# --- Setup Logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.getLogger(__name__)


class GLMImageRunner:
    """
    Orchestrates the extraction of GLM result images.
    """
    def __init__(self, all_vars):
        self.params = all_vars.params
        self.project_vars = all_vars.projects[self.params.project]
        self.fs_vars = all_vars.location_vars['local']['FREESURFER']

        # --- Paths ---
        self.glm_dir = self.project_vars['STATS_PATHS']['FS_GLM_dir']
        self.subjects_dir = self.fs_vars['SUBJECTS_DIR']
        self.results_path = os.path.join(self.glm_dir, 'results')
        self.images_path = os.path.join(self.glm_dir, 'images')
        
        # --- Config ---
        self.sig_fdr_file = os.path.join(self.images_path, 'sig_fdr.json')
        self.sig_mc_file = os.path.join(self.images_path, 'sig_mc.json')
        
        # --- Image Generation Parameters ---
        self.fdr_thresh = 3.0  # p = 0.001
        self.mc_img_thresh = 1.3 # p = 0.05

    def run(self):
        """
        Main method to find significant results and generate images.
        """
        log.info(f"Starting GLM image extraction in: {self.glm_dir}")

        if os.path.exists(self.sig_fdr_file):
            self._extract_fdr_images()
        else:
            log.warning(f"FDR results file not found, skipping FDR images: {self.sig_fdr_file}")

        if os.path.exists(self.sig_mc_file):
            self._extract_monte_carlo_images()
        else:
            log.warning(f"Monte-Carlo results file not found, skipping MC images: {self.sig_mc_file}")

        self._cleanup()
        log.info("Image extraction process complete.")

    def _extract_fdr_images(self):
        """
        Reads the FDR results file and generates images using tksurfer.
        """
        log.info("Generating images for FDR significant results...")
        fdr_results = load_json(self.sig_fdr_file)
        output_dir = os.path.join(self.results_path, 'fdr_images')
        os.makedirs(output_dir, exist_ok=True)

        for result in fdr_results.values():
            analysis_name = result['analysis_name']
            contrast_name = result['fsgd_type_contrast']
            hemi = result['hemi']
            sig_file_path = os.path.join(self.images_path, analysis_name, contrast_name, 'sig.mgh')

            if not os.path.exists(sig_file_path):
                log.warning(f"sig.mgh file not found for FDR result: {sig_file_path}")
                continue

            base_name = f"{analysis_name}_{contrast_name}"
            cmd_file = self._create_tksurfer_cmd_file(output_dir, base_name)
            
            command = (
                f"tksurfer fsaverage {hemi} inflated "
                f"-overlay {sig_file_path} "
                f"-fthresh {self.fdr_thresh} -tcl {cmd_file}"
            )
            log.info(f"Running tksurfer for {base_name}...")
            os.system(command)

    def _create_tksurfer_cmd_file(self, output_dir, base_name):
        """Creates a temporary tcl script for tksurfer."""
        cmd_file_path = os.path.join(self.glm_dir, 'tksurfer.cmd')
        
        # Note: tksurfer is deprecated in FS > 7.3. This might need to be
        # updated to use Freeview commands for newer versions.
        commands = [
            'set colscalebarflag 1',
            'set scalebarflag 1',
            f'save_tiff {os.path.join(output_dir, f"{base_name}_lat.tiff")}',
            'rotate_brain_y 180',
            'redraw',
            f'save_tiff {os.path.join(output_dir, f"{base_name}_med.tiff")}',
            'exit'
        ]
        
        with open(cmd_file_path, 'w') as f:
            f.write('\n'.join(commands))
        return cmd_file_path

    def _extract_monte_carlo_images(self):
        """
        Reads the Monte-Carlo results file and generates images using Freeview.
        """
        log.info("Generating images for Monte-Carlo corrected results...")
        mc_results = load_json(self.sig_mc_file)
        output_dir = os.path.join(self.results_path, 'mc_images')
        os.makedirs(output_dir, exist_ok=True)

        for result in mc_results.values():
            base_name = f"{result['analysis_name']}_{result['contrast']}_{result['direction']}"
            hemi = result['hemi']
            
            overlay_file = os.path.join(self.images_path, result['cwsig_mc_f'])
            annot_file = os.path.join(self.images_path, result['oannot_mc_f'])

            if not os.path.exists(overlay_file) or not os.path.exists(annot_file):
                log.warning(f"Overlay or annotation file missing for MC result: {base_name}")
                continue
            
            cmd_file = self._create_freeview_cmd_file(output_dir, base_name)
            
            command = (
                f"freeview -f $SUBJECTS_DIR/fsaverage/surf/{hemi}.inflated:overlay={overlay_file}"
                f":overlay_threshold={self.mc_img_thresh},5:annot={annot_file} "
                f"-viewport 3d -layout 1 -cmd {cmd_file}"
            )
            log.info(f"Running Freeview for {base_name}...")
            os.system(command)

    def _create_freeview_cmd_file(self, output_dir, base_name):
        """Creates a temporary cmd script for Freeview."""
        cmd_file_path = os.path.join(self.glm_dir, 'freeview.cmd')
        
        commands = [
            f'-ss {os.path.join(output_dir, f"{base_name}_lat.tiff")}',
            '-cam Azimuth 180',
            f'-ss {os.path.join(output_dir, f"{base_name}_med.tiff")}',
            '-quit'
        ]
        with open(cmd_file_path, 'w') as f:
            f.write('\n'.join(commands))
        return cmd_file_path

    def _cleanup(self):
        """Removes temporary command files."""
        log.info("Cleaning up temporary files...")
        for cmd_file in ['tksurfer.cmd', 'freeview.cmd', 'surfer.log', '.xdebug_tksurfer']:
            temp_file = os.path.join(self.glm_dir, cmd_file)
            if os.path.exists(temp_file):
                os.remove(temp_file)

def main():
    """
    Main entry point for the independent GLM image runner script.
    """
    try:
        # The script is independent, so it loads its own config
        all_vars = ConfigManager()
        runner = GLMImageRunner(all_vars)
        runner.run()
    except Exception as e:
        log.error("A fatal error occurred in the GLM image runner.", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()
